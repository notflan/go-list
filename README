=== go-list === 

Simple list abstraction for slices.

Package exports:

list.New() // Return new empty list
 list.New(slice) //Return new list from elements in slice
 list.New(list) //Returns new list from elements in list
 list.New(...) //Returns new list with elements preset (note: New(slice1, slice2) makes a list like (list slice1 slice2) not a list like (nconc slice1 slice2) (see Nconc() or list.Flat() below or use New().Add(slice1...).Add(slice2...))

list.NewAlist(...) //Returns a new alist of key,value pairs. Like, NewAlist("key1","value1","key2","value2") etc. If arg list has a key without value at the end, it is set to `nil'. If a value is a slice or *List, it is added as (key value[0], value[1] ...), but there if functionally no difference between that and (key value)
list.Flat(...) //Returns a new list of slices concatenated together.
list.Single(element0) //Return new list with single element initialised
list.Nconc(...) //Concatenate all lists together, ignores `nil' values.

Type *List (*[]interface{}):

 *List.Add(...) //Add element(s) to end of list
 *List.Push(...) //Add element(s) to start of list

 *List.Remove(...) //Remove at indecies. note: It does this in order, so Remove(0,0) removes the first 2 elements (see RemoveInto())
 *List.RemoveInto(...) //Remove at indecies in parallel, RemoveInto(0,1) removes the first 2 elements.
 *List.Clear() //Clear all elements in list

 *List.Car() //Return first element
 *List.Cdr() //Return [1:] slice of list

 *List.Slice() //Return list as a slice
 *List.Slice(start) //Return list as slice [start:]
 *List.Slice(start,end) //Return list as slice [start:end]
	//Note that these indecies get passed to Circle() first, so .Slice(-4, -2) is like [len(slice)-4:len(slice)-2] etc
 *List.SliceInto(slice, ...) //Like Slice, but puts into an already defined slice.
 *List.SliceReflect(example, ...) //Like Slice, but uses reflection to cast to type of `example', or uses the type of the first element in the sliced list, if `example' is nil.

 *List.Map(f) //Map over list
 *List.MapCar(f) //Map over list, return results of f() in new list
 *List.MapInto(f) //MapCar but in-place
 *List.MapRef(f) //Map() but with pointers instead
 *List.MapCan(f) //Map over list, return results of function f() as concatednated lists
 *List.When(f) //Map over list, returns new list of results that satisfy f()

 *List.Len() //Length of list
 *List.Cap() //Capacity of underlying slice

 *List.Circle(index) //Circles index around length of list 

 *List.Get(index) //Return element at circular index
 *List.Set(index, value) //Sets element at circular index
 *List.Ref(index) //Return pointer to element at circular index

 *List.Clone() //Clone list into new one. Same as list2 := New(list1)

 *List.RangeCheck(index) // Checks if index is valid

 *List.To*s() //Type assertions to basic type. Optionally provide function to call to recover from casting error:
		list.ToRunes(func( *List,  int,interface{}) { return '?' })

 *List.AddTuple(key, value) //Adds a new list of 2 elements to end of list
 *List.PushTuple(key, balue) //Adds new list of 2 elements to start of list
 *List.Assoc(key, ...) //Treat list as alist, return first tuple to match key and bool if match was successful or not. Optionally provide functions:
 *List.Assoc(key, eq) //Equals predicate, used to compare keys to `key', or nil, for default. Is func(interface{},interface{})bool
 *List.Assoc(key, eq, skey) //Function applied to key before comparisons or nil for default, does not affect returns. Can be either func(int,interface{})interface{} or func(interface{})interface{}
	//If an alist entry has not just 2 values (key value) but multiple (key value1 value2...) then the `Value' slot of returned
	// tuple is a *List of those. If the alist entry is atom, or is a list (or slice) of size 1, then `nil' is used as the value.
	//The returning tuple has two interface{} slots: Key and Value, the returning boolean is true is a match was found.
	//Example:
	// tuple, ok := New(New("k", "v"), New("k2", "v2"), New("k3", 1)).Assoc("k2") //returns {key:"k2", value:"v2"}, true

--- S-expression parser ---

In list/sexpr we have a text parser for s-expressions into lists.

Basic usage:
 list, ok := ParseFull(string) //Parses string into list. ok returns false if the syntax is invalid, the list elements will either be type string or *List

 proto := Parse(string) //Parses into *List of sexpr.Value type. See source for details.

Other functions:

sexpr.String(proto) //Returns string from proto
sexpr.ToList(proto) //Return list of string or *List from list of Values

sexpr.DeepClone(fullOrProto) 	//Returns a clone of list, where all sublists are cloned also.
sexpr.Path(full, ...)		//Returns pointer to element at path in sublists, example:
				//	lis, _ := ParseFull(`(one (two (three four) five))`)
				//	Path(lis, 1, 2) // *five 
sexpr.Path(full, ..., value)	//Sets element at path to that of value
				//	Path(lis, 1, 1, 0, "change") // lis is now (one (two (change four) five))
